using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Diagnostics;
using System.Linq;
using System.Windows.Forms;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


 // ERROR: Not supported in C#: OptionDeclaration
using System.ComponentModel;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

//
//This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.269.
//
namespace LightenedDream.EmailService
{

	///<remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"), System.Diagnostics.DebuggerStepThroughAttribute(), System.ComponentModel.DesignerCategoryAttribute("code"), System.Web.Services.WebServiceBindingAttribute(Name = "EmailServiceSoap", Namespace = "http://www.lucid-code.com/")]
	public partial class EmailService : System.Web.Services.Protocols.SoapHttpClientProtocol
	{

		private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;

		private System.Threading.SendOrPostCallback SendOperationCompleted;

		private bool useDefaultCredentialsSetExplicitly;

		///<remarks/>
		public EmailService() : base()
		{
			this.Url = global::LightenedDream.My.MySettings.Default.Liquid_Dream_III_EmailService_EmailService;
			if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
				this.UseDefaultCredentials = true;
				this.useDefaultCredentialsSetExplicitly = false;
			} else {
				this.useDefaultCredentialsSetExplicitly = true;
			}
		}

		public new string Url {
			get { return base.Url; }
			set {
				if ((((this.IsLocalFileSystemWebService(base.Url) == true) && (this.useDefaultCredentialsSetExplicitly == false)) && (this.IsLocalFileSystemWebService(value) == false))) {
					base.UseDefaultCredentials = false;
				}
				base.Url = value;
			}
		}

		public new bool UseDefaultCredentials {
			get { return base.UseDefaultCredentials; }
			set {
				base.UseDefaultCredentials = value;
				this.useDefaultCredentialsSetExplicitly = true;
			}
		}

		///<remarks/>
		public event HelloWorldCompletedEventHandler HelloWorldCompleted;

		///<remarks/>
		public event SendCompletedEventHandler SendCompleted;

		///<remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lucid-code.com/HelloWorld", RequestNamespace = "http://www.lucid-code.com/", ResponseNamespace = "http://www.lucid-code.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public string HelloWorld(string strTest)
		{
			object[] results = this.Invoke("HelloWorld", new object[] { strTest });
			return Convert.ToString(results[0]);
		}

		///<remarks/>
		public void HelloWorldAsync(string strTest)
		{
			this.HelloWorldAsync(strTest, null);
		}

		///<remarks/>
		public void HelloWorldAsync(string strTest, object userState)
		{
			if ((this.HelloWorldOperationCompleted == null)) {
				this.HelloWorldOperationCompleted = this.OnHelloWorldOperationCompleted;
			}
			this.InvokeAsync("HelloWorld", new object[] { strTest }, this.HelloWorldOperationCompleted, userState);
		}

		private void OnHelloWorldOperationCompleted(object arg)
		{
			if ((((this.HelloWorldCompletedEvent) != null))) {
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = (System.Web.Services.Protocols.InvokeCompletedEventArgs)arg;
				if (HelloWorldCompleted != null) {
					HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
				}
			}
		}

		///<remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lucid-code.com/Send", RequestNamespace = "http://www.lucid-code.com/", ResponseNamespace = "http://www.lucid-code.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public object Send(string ReplyAddress, string MessageType, string OS, string Message)
		{
			object[] results = this.Invoke("Send", new object[] {
				ReplyAddress,
				MessageType,
				OS,
				Message
			});
			return (object)results[0];
		}

		///<remarks/>
		public void SendAsync(string ReplyAddress, string MessageType, string OS, string Message)
		{
			this.SendAsync(ReplyAddress, MessageType, OS, Message, null);
		}

		///<remarks/>
		public void SendAsync(string ReplyAddress, string MessageType, string OS, string Message, object userState)
		{
			if ((this.SendOperationCompleted == null)) {
				this.SendOperationCompleted = this.OnSendOperationCompleted;
			}
			this.InvokeAsync("Send", new object[] {
				ReplyAddress,
				MessageType,
				OS,
				Message
			}, this.SendOperationCompleted, userState);
		}

		private void OnSendOperationCompleted(object arg)
		{
			if ((((this.SendCompletedEvent) != null))) {
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = (System.Web.Services.Protocols.InvokeCompletedEventArgs)arg;
				if (SendCompleted != null) {
					SendCompleted(this, new SendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
				}
			}
		}

		///<remarks/>
		public new void CancelAsync(object userState)
		{
			base.CancelAsync(userState);
		}

		private bool IsLocalFileSystemWebService(string url)
		{
			if (((url == null) || (object.ReferenceEquals(url, string.Empty)))) {
				return false;
			}
			System.Uri wsUri = new System.Uri(url);
			if (((wsUri.Port >= 1024) && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
				return true;
			}
			return false;
		}
	}

	///<remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
	public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);

	///<remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"), System.Diagnostics.DebuggerStepThroughAttribute(), System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
		{
			this.results = results;
		}

		///<remarks/>
		public string Result {
			get {
				this.RaiseExceptionIfNecessary();
				return Convert.ToString(this.results[0]);
			}
		}
	}

	///<remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
	public delegate void SendCompletedEventHandler(object sender, SendCompletedEventArgs e);

	///<remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"), System.Diagnostics.DebuggerStepThroughAttribute(), System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
		{
			this.results = results;
		}

		///<remarks/>
		public object Result {
			get {
				this.RaiseExceptionIfNecessary();
				return (object)this.results[0];
			}
		}
	}
}
